user openresty;
worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {
    # 设置默认 lua 搜索路径，添加 lua 路径
    # 此处写相对路径时，对启动 nginx 的路径有要求，必须在 nginx 目录下启动，require 找不到
    # comm.param 绝对路径当然也没问题，但是不可移植，因此应使用变量 $prefix 或
    # ${prefix}，OR 会替换为 nginx 的 prefix path。

    # lua_package_path 'lua/?.lua;/blah/?.lua;;';
    lua_package_path '$prefix/lua/?.lua;/blah/?.lua;;';

    # 这里设置为 off，是为了避免每次修改之后都要重新 reload 的麻烦。
    # 在生产环境上务必确保 lua_code_cache 设置成 on。
    lua_code_cache off;

    server {
        listen 81;
        # 在代码路径中使用nginx变量
        # 注意： nginx var 的变量一定要谨慎，否则将会带来非常大的风险
        location ~ ^/api/([-_a-zA-Z0-9/]+) {
            # 准入阶段完成参数验证
            access_by_lua_file  lua/access_check.lua;

            #内容生成阶段
            content_by_lua_file lua/$1.lua;


        }

        #测试执行阶段
        location /mixed {
            # set_by_lua*: 流程分支处理判断变量初始化
            set_by_lua_block $a {
                ngx.log(ngx.ERR, "set_by_lua*")
            }
            # rewrite_by_lua*: 转发、重定向、缓存等功能(例如特定请求代理到外网)
            rewrite_by_lua_block {
                ngx.log(ngx.ERR, "rewrite_by_lua*")
            }
            # access_by_lua*: IP 准入、接口权限等情况集中处理(例如配合 iptable 完成简单防火墙)
            access_by_lua_block {
                ngx.log(ngx.ERR, "access_by_lua*")
            }
            # content_by_lua*: 内容生成
            content_by_lua_block {
                ngx.log(ngx.ERR, "content_by_lua*")
            }
            # header_filter_by_lua*: 响应头部过滤处理(例如添加头部信息)
            header_filter_by_lua_block {
                ngx.log(ngx.ERR, "header_filter_by_lua*")
            }
            # body_filter_by_lua*: 响应体过滤处理(例如完成应答内容统一成大写)
            body_filter_by_lua_block {
                ngx.log(ngx.ERR, "body_filter_by_lua*")
            }
            # 会话完成后本地异步完成日志记录(日志可以记录在本地，还可以同步到其他机器)
            log_by_lua_block {
                ngx.log(ngx.ERR, "log_by_lua*")
            }
        }

        # http cache test
        location = /http_cache_test {
            default_type text/html;
            content_by_lua_file lua/http_cache/content.lua;
            header_filter_by_lua_file lua/http_cache/header_filter.lua;
        }
    }
}
